[project]
name = "prompt-xml-strategies"
version = "0.1.0"
description = "A Python framework for creating structured prompts using JSON schemas with JSON-to-XML transformation capabilities"
readme = "README.md"
requires-python = ">=3.11"
keywords = ["llm", "prompts", "json-schema", "xml", "xsd", "validation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: XML",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "jsonschema>=4.20.0",
    "pydantic>=2.5.0",
    "jinja2>=3.1.0",
    "lxml>=4.9.0",
    "xmlschema>=2.5.0",
    "requests>=2.31.0",
    "anthropic>=0.7.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "hypothesis>=6.88.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
]

[project.scripts]
prompt-xml = "prompt_xml_strategies.cli:main"

[project.urls]
Homepage = "https://github.com/promptxml/prompt-xml-strategies"
Repository = "https://github.com/promptxml/prompt-xml-strategies"
Documentation = "https://prompt-xml-strategies.readthedocs.io"
Issues = "https://github.com/promptxml/prompt-xml-strategies/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/prompt_xml_strategies"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/prompt_xml_strategies",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests that may take a while",
    "llm: Tests that require LLM API access",
    "network: Tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "lxml.*",
    "xmlschema.*",
]
ignore_missing_imports = true

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=6.3.0",
    "pytest-mock>=3.15.0",
]
